{
  "version": 1,
  "rules": [
    {
      "name": "AIQToolkit Project Guidelines",
      "description": "Best practices for example creation",
      "type": "Always",
      "patterns": [
        "examples/**/*",
        "src/**/*",
        "configs/**/*",
        "data/**/*"
      ],
      "settings": {
        "formatOnSave": true,
        "lintOnSave": true,
        "tabSize": 2,
        "insertSpaces": true
      },
      "guidelines": {
        "projectStructure": {
          "description": "Project structure guidelines",
          "rules": [
            "Follow structure and conventions from examples/simple",
            "Configuration files must be stored under src/aiq_example_name/configs/",
            "Data files must be stored under src/aiq_example_name/data/",
            "Use symbolic links from root configs/ and data/ directories",
            "Track all data files under src/aiq_example_name/data/** with Git LFS"
          ]
        },
        "codeStandards": {
          "description": "Code standards and best practices",
          "rules": [
            "Use type hints for all function parameters and returns",
            "Use pytest for testing",
            "Provide unit and end-to-end tests",
            "Use asyncio for IO bound APIs",
            "Follow PEP 8 style guide for Python code",
            "Use black for code formatting",
            "Use isort for import sorting",
            "Use mypy for static type checking",
            "Maximum line length should be 88 characters (black default)",
            "Use f-strings for string formatting",
            "Use dataclasses for data structures",
            "Implement proper error handling with custom exceptions"
          ]
        },
        "documentation": {
          "description": "Documentation references and guidelines",
          "rules": [
            "Reference NVIDIA AIQ documentation at https://developer.nvidia.com/agent-intelligence-toolkit",
            "Follow project guidelines from https://github.com/NVIDIA/AIQToolkit",
            "Keep documentation up to date with code changes",
            "Include docstrings for all public APIs and classes",
            "Use Google style docstrings",
            "Include usage examples in docstrings",
            "Document all configuration parameters",
            "Maintain README.md with setup and usage instructions"
          ]
        },
        "testing": {
          "description": "Testing standards and requirements",
          "rules": [
            "Maintain minimum 80% code coverage",
            "Write tests before implementing features (TDD)",
            "Include integration tests for API endpoints",
            "Mock external dependencies in unit tests",
            "Use pytest fixtures for test setup",
            "Include performance benchmarks",
            "Test error handling and edge cases",
            "Use pytest-asyncio for async tests"
          ]
        },
        "security": {
          "description": "Security best practices",
          "rules": [
            "Never commit sensitive data or credentials",
            "Use environment variables for configuration",
            "Implement proper input validation",
            "Follow OWASP security guidelines",
            "Use secure defaults for all configurations",
            "Implement rate limiting for APIs",
            "Use proper authentication and authorization"
          ]
        },
        "performance": {
          "description": "Performance optimization guidelines",
          "rules": [
            "Profile code for performance bottlenecks",
            "Use async/await for I/O operations",
            "Implement proper caching strategies",
            "Optimize database queries",
            "Use connection pooling",
            "Implement proper logging levels",
            "Monitor memory usage",
            "Use appropriate data structures"
          ]
        },
        "deployment": {
          "description": "Deployment and CI/CD guidelines",
          "rules": [
            "Use Docker for containerization",
            "Implement proper health checks",
            "Use semantic versioning",
            "Maintain changelog",
            "Implement proper logging",
            "Use environment-specific configurations",
            "Follow 12-factor app principles"
          ]
        }
      }
    },
    {
      "name": "AIQ Workflow Command Execution",
      "description": "Execute AIQ workflow commands through Cursor",
      "type": "Always",
      "patterns": [
        "examples/**/*",
        "src/**/*"
      ],
      "settings": {
        "formatOnSave": true,
        "lintOnSave": true
      },
      "guidelines": {
        "workflowCreate": {
          "description": "Execute workflow creation command",
          "rules": [
            "When user requests to create a workflow:",
            "  - Extract workflow name from request",
            "  - Execute: aiq workflow create <workflow_name>",
            "  - If workflow directory specified:",
            "    - Execute: aiq workflow create --workflow-dir <dir> <workflow_name>",
            "  - If no-install flag specified:",
            "    - Execute: aiq workflow create --no-install <workflow_name>",
            "  - If description specified:",
            "    - Execute: aiq workflow create --description '<desc>' <workflow_name>",
            "  - Handle multiple flags:",
            "    - Combine all specified flags in command",
            "  - Verify command execution success",
            "  - Verify workflow structure:",
            "    - Check against AIQToolkit Project Guidelines for:",
            "      - Project structure requirements",
            "      - Code standards and best practices",
            "      - Documentation requirements",
            "    - If any verification fails:",
            "      - Report specific missing or incorrect elements",
            "      - Suggest manual fixes if needed",
            "  - If installation was not skipped:",
            "    - Execute: aiq info components -t package",
            "    - Verify workflow name appears in installed components",
            "    - If workflow not found in components:",
            "      - Report installation verification failure",
            "      - Suggest manual installation if needed",
            "  - Handle any errors appropriately"
          ]
        },
        "workflowDelete": {
          "description": "Execute workflow deletion command",
          "rules": [
            "When user requests to delete a workflow:",
            "  - Extract workflow name from request",
            "  - Execute: yes | aiq workflow delete <workflow_name>",
            "  - Verify deletion using aiq info components -t package",
            "  - Confirm workflow no longer appears in installed components",
            "  - Handle any errors appropriately"
          ]
        },
        "workflowReinstall": {
          "description": "Execute workflow reinstall command",
          "rules": [
            "When user requests to reinstall a workflow:",
            "  - Extract workflow name from request",
            "  - Execute: aiq workflow reinstall <workflow_name>",
            "  - Verify reinstall using aiq info components -t package",
            "  - Confirm workflow appears in installed components"
          ]
        },
        "workflowRun": {
          "description": "Execute workflow run command with optional overrides",
          "rules": [
            "When user requests to run a workflow:",
            "  - Extract workflow config file path and input from request",
            "  - Execute: aiq run --config_file <config_path> --input '<input>'",
            "  - If override arguments specified:",
            "    - Add --override flag for each parameter:",
            "      - Format: --override <section>.<component>.<parameter> <value>",
            "      - Example: --override llms.nim_llm.temperature 0.7",
            "    - Support multiple overrides in single command",
            "  - Handle command output:",
            "    - If run successful:",
            "      - Display workflow result",
            "      - Confirm all overrides were applied",
            "  - Handle any other errors appropriately"
          ]
        },
        "workflowAddTool": {
          "description": "Add new tools to workflow configuration",
          "rules": [
            "When user requests to add a tool to workflow:",
            "  - Extract workflow config file path and tool details",
            "  - Verify tool type exists in available components:",
            "    - Execute: aiq info components -t function",
            "    - Check if requested tool type is available",
            "  - Add new tool to functions section. If functions section does not exist, create it.",
            "    - Format:",
            "      ```yaml",
            "      functions:",
            "        <tool_name>:",
            "          _type: <tool_type>",
            "          <required_params>: <values>",
            "          <optional_params>: <values>",
            "      ```",
            "    - Example for webpage_query:",
            "      ```yaml",
            "      functions:",
            "        webpage_query:",
            "          _type: webpage_query",
            "          webpage_url: <url>",
            "          description: <desc>",
            "          embedder_name: nv-embedqa-e5-v5",
            "          chunk_size: 512",
            "      ```",
            "  - Update workflow.tool_names section:",
            "    - Add new tool name to the list",
            "    - Example:",
            "      ```yaml",
            "      workflow:",
            "        _type: react_agent",
            "        tool_names: [tool1, tool2, new_tool]",
            "      ```",
            "  - Verify config file is valid YAML",
            "  - If tool requires additional dependencies:",
            "    - Update pyproject.toml with required dependencies",
            "    - Reinstall workflow package",
            "  - Handle any errors appropriately"
          ]
        },
        "commandPatterns": {
          "description": "Recognize workflow creation and deletion requests",
          "rules": [
            "Match patterns like:",
            "  - 'create workflow <name>'",
            "  - 'create new workflow <name>'",
            "  - 'create aiq workflow <name>'",
            "  - 'create workflow <name> in <dir>'",
            "  - 'create workflow <name> without installing'",
            "  - 'create workflow <name> with description <desc>'",
            "  - 'delete workflow <name>'",
            "  - 'remove workflow <name>'",
            "  - 'uninstall workflow <name>'",
            "  - 'reinstall workflow <name>'",
            "  - 'reinstall <name>'",
            "  - 'run workflow <config> with input <input>'",
            "  - 'run workflow <config> with input <input> and override <param> to <value>'",
            "  - 'add tool <tool_type> to workflow <config>'",
            "  - 'add <tool_type> tool to workflow <config>'",
            "  - 'add new tool <tool_type> to workflow <config>'",
            "Extract parameters:",
            "  - workflow_name: Required, must be valid Python package name",
            "  - workflow_dir: Optional, defaults to current directory",
            "  - install: Optional, defaults to true",
            "  - description: Optional, defaults to template description",
            "  - config_file: Required for run command, path to workflow config",
            "  - input: Required for run command, input text for workflow",
            "  - overrides: Optional for run command, list of parameter overrides",
            "  - tool_type: Required for add tool command, type of tool to add",
            "  - tool_name: Optional for add tool command, name for the new tool",
            "  - tool_params: Optional for add tool command, parameters for the tool"
          ]
        },
        "parameterValidation": {
          "description": "Validate workflow creation parameters",
          "rules": [
            "Validate workflow name:",
            "  - Must be valid Python package name",
            "  - No spaces or special characters",
            "  - Convert to snake_case if needed",
            "Validate workflow directory:",
            "  - Must exist",
            "  - Must be writable",
            "  - Convert to absolute path if relative",
            "Validate description:",
            "  - Must be string",
            "  - Properly escape special characters",
            "Validate config file:",
            "  - Must exist",
            "  - Must be valid YAML",
            "  - Must contain required sections",
            "Validate override parameters:",
            "  - Must follow section.component.parameter format",
            "  - Values must match expected types",
            "  - Must reference existing components",
            "Validate tool parameters:",
            "  - Tool type must exist in available components",
            "  - Required parameters must be provided",
            "  - Optional parameters must have valid values",
            "  - Tool name must be unique in config",
            "  - Tool name must be valid Python identifier"
          ]
        },
        "errorHandling": {
          "description": "Handle workflow creation errors",
          "rules": [
            "Handle common errors:",
            "  - Invalid workflow name",
            "  - Directory does not exist",
            "  - Permission denied",
            "  - Package already exists",
            "  - Invalid config file",
            "  - Invalid override parameters",
            "  - Component not found",
            "  - Tool type not found",
            "  - Missing required tool parameters",
            "  - Invalid tool parameters",
            "  - Duplicate tool name",
            "  - Missing dependencies",
            "Provide clear error messages",
            "Suggest corrections when possible"
          ]
        }
      }
    }
  ]
}
