---
description:
globs:
alwaysApply: true
---
# Project Structure Guidelines
- Follow structure and conventions from examples/simple
- Configuration files must be stored under src/aiq_example_name/configs/
- Data files must be stored under src/aiq_example_name/data/
- Use symbolic links from root configs/ and data/ directories
- Track all data files under src/aiq_example_name/data/** with Git LFS

# Code Standards
- Use type hints for all function parameters and returns
- Use pytest for testing
- Provide unit and end-to-end tests
- Use asyncio for IO bound APIs
- Follow PEP 8 style guide for Python code
- Use black for code formatting
- Use isort for import sorting
- Use mypy for static type checking
- Maximum line length should be 88 characters (black default)
- Use f-strings for string formatting
- Use dataclasses for data structures
- Implement proper error handling with custom exceptions

# Documentation
- Reference NVIDIA AIQ documentation at https://developer.nvidia.com/agent-intelligence-toolkit
- Follow project guidelines from https://github.com/NVIDIA/AIQToolkit
- Keep documentation up to date with code changes
- Include docstrings for all public APIs and classes
- Use Google style docstrings
- Include usage examples in docstrings
- Document all configuration parameters
- Maintain README.md with setup and usage instructions

# Testing Standards
- Maintain minimum 80% code coverage
- Write tests before implementing features (TDD)
- Include integration tests for API endpoints
- Mock external dependencies in unit tests
- Use pytest fixtures for test setup
- Include performance benchmarks
- Test error handling and edge cases
- Use pytest-asyncio for async tests

# Security Best Practices
- Never commit sensitive data or credentials
- Use environment variables for configuration
- Implement proper input validation
- Follow OWASP security guidelines
- Use secure defaults for all configurations
- Implement rate limiting for APIs
- Use proper authentication and authorization

# Performance Guidelines
- Profile code for performance bottlenecks
- Use async/await for I/O operations
- Implement proper caching strategies
- Optimize database queries
- Use connection pooling
- Implement proper logging levels
- Monitor memory usage
- Use appropriate data structures

# Deployment Guidelines
- Use Docker for containerization
- Implement proper health checks
- Use semantic versioning
- Maintain changelog
- Implement proper logging
- Use environment-specific configurations
- Follow 12-factor app principles
