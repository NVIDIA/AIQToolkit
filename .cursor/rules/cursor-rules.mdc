---
description: How to add or edit Cursor rules in our project
globs:
alwaysApply: false
---
# Cursor Rules Location

How to add new cursor rules to the project

1. Always place rule files in PROJECT_ROOT/.cursor/rules/:
    ```
    .cursor/rules/
    ├── your-rule-name.mdc
    ├── another-rule.mdc
    └── ...
    ```

2. Follow the naming convention:
    - Use kebab-case for filenames
    - Always use .mdc extension
    - Make names descriptive of the rule's purpose

3. Directory structure:
    ```
    PROJECT_ROOT/
    ├── .cursor/
    │   └── rules/
    │       ├── your-rule-name.mdc
    │       └── ...
    └── ...
    ```

4. For related rules sharing the same topic, create a subdirectory:
    ```
    .cursor/rules/
    ├── topic-name/
    │   ├── general.mdc          # General rules for this topic
    │   ├── specific-rule.mdc    # Specific rules within the topic
    │   └── another-rule.mdc
    ├── another-topic/
    │   ├── general.mdc
    │   └── specific-rule.mdc
    └── standalone-rule.mdc
    ```

5. When creating topic subdirectories:
    - Use kebab-case for directory names
    - Always include a `general.mdc` file with overarching guidelines for the topic
    - Place specific rules as separate .mdc files within the subdirectory
    - Example: `aiq-cli/` folder contains general AIQ CLI rules in `general.mdc` and specific command rules in separate files

6. Never place rule files:
    - In the project root
    - In subdirectories outside .cursor/rules
    - In any other location

7. Cursor rules have the following structure:

---
description: Short description of the rule's purpose
globs: optional/path/pattern/**/*
alwaysApply: false
---
# Rule Title

Main content explaining the rule with markdown formatting.

1. Step-by-step instructions
2. Code examples
3. Guidelines
Example:
```typescript
// Good example
function goodExample() {
  // Implementation following guidelines
}

// Bad example
function badExample() {
  // Implementation not following guidelines
}
```
